// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/Milefer7/compliation_exp/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLexicalAnalysis(db *gorm.DB, opts ...gen.DOOption) lexicalAnalysis {
	_lexicalAnalysis := lexicalAnalysis{}

	_lexicalAnalysis.lexicalAnalysisDo.UseDB(db, opts...)
	_lexicalAnalysis.lexicalAnalysisDo.UseModel(&model.LexicalAnalysis{})

	tableName := _lexicalAnalysis.lexicalAnalysisDo.TableName()
	_lexicalAnalysis.ALL = field.NewAsterisk(tableName)
	_lexicalAnalysis.LineNum = field.NewInt(tableName, "line_num")
	_lexicalAnalysis.Content = field.NewString(tableName, "content")
	_lexicalAnalysis.Type = field.NewString(tableName, "type")

	_lexicalAnalysis.fillFieldMap()

	return _lexicalAnalysis
}

type lexicalAnalysis struct {
	lexicalAnalysisDo lexicalAnalysisDo

	ALL     field.Asterisk
	LineNum field.Int
	Content field.String
	Type    field.String

	fieldMap map[string]field.Expr
}

func (l lexicalAnalysis) Table(newTableName string) *lexicalAnalysis {
	l.lexicalAnalysisDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lexicalAnalysis) As(alias string) *lexicalAnalysis {
	l.lexicalAnalysisDo.DO = *(l.lexicalAnalysisDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lexicalAnalysis) updateTableName(table string) *lexicalAnalysis {
	l.ALL = field.NewAsterisk(table)
	l.LineNum = field.NewInt(table, "line_num")
	l.Content = field.NewString(table, "content")
	l.Type = field.NewString(table, "type")

	l.fillFieldMap()

	return l
}

func (l *lexicalAnalysis) WithContext(ctx context.Context) *lexicalAnalysisDo {
	return l.lexicalAnalysisDo.WithContext(ctx)
}

func (l lexicalAnalysis) TableName() string { return l.lexicalAnalysisDo.TableName() }

func (l lexicalAnalysis) Alias() string { return l.lexicalAnalysisDo.Alias() }

func (l lexicalAnalysis) Columns(cols ...field.Expr) gen.Columns {
	return l.lexicalAnalysisDo.Columns(cols...)
}

func (l *lexicalAnalysis) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lexicalAnalysis) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["line_num"] = l.LineNum
	l.fieldMap["content"] = l.Content
	l.fieldMap["type"] = l.Type
}

func (l lexicalAnalysis) clone(db *gorm.DB) lexicalAnalysis {
	l.lexicalAnalysisDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lexicalAnalysis) replaceDB(db *gorm.DB) lexicalAnalysis {
	l.lexicalAnalysisDo.ReplaceDB(db)
	return l
}

type lexicalAnalysisDo struct{ gen.DO }

func (l lexicalAnalysisDo) Debug() *lexicalAnalysisDo {
	return l.withDO(l.DO.Debug())
}

func (l lexicalAnalysisDo) WithContext(ctx context.Context) *lexicalAnalysisDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lexicalAnalysisDo) ReadDB() *lexicalAnalysisDo {
	return l.Clauses(dbresolver.Read)
}

func (l lexicalAnalysisDo) WriteDB() *lexicalAnalysisDo {
	return l.Clauses(dbresolver.Write)
}

func (l lexicalAnalysisDo) Session(config *gorm.Session) *lexicalAnalysisDo {
	return l.withDO(l.DO.Session(config))
}

func (l lexicalAnalysisDo) Clauses(conds ...clause.Expression) *lexicalAnalysisDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lexicalAnalysisDo) Returning(value interface{}, columns ...string) *lexicalAnalysisDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lexicalAnalysisDo) Not(conds ...gen.Condition) *lexicalAnalysisDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lexicalAnalysisDo) Or(conds ...gen.Condition) *lexicalAnalysisDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lexicalAnalysisDo) Select(conds ...field.Expr) *lexicalAnalysisDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lexicalAnalysisDo) Where(conds ...gen.Condition) *lexicalAnalysisDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lexicalAnalysisDo) Order(conds ...field.Expr) *lexicalAnalysisDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lexicalAnalysisDo) Distinct(cols ...field.Expr) *lexicalAnalysisDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lexicalAnalysisDo) Omit(cols ...field.Expr) *lexicalAnalysisDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lexicalAnalysisDo) Join(table schema.Tabler, on ...field.Expr) *lexicalAnalysisDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lexicalAnalysisDo) LeftJoin(table schema.Tabler, on ...field.Expr) *lexicalAnalysisDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lexicalAnalysisDo) RightJoin(table schema.Tabler, on ...field.Expr) *lexicalAnalysisDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lexicalAnalysisDo) Group(cols ...field.Expr) *lexicalAnalysisDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lexicalAnalysisDo) Having(conds ...gen.Condition) *lexicalAnalysisDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lexicalAnalysisDo) Limit(limit int) *lexicalAnalysisDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lexicalAnalysisDo) Offset(offset int) *lexicalAnalysisDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lexicalAnalysisDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *lexicalAnalysisDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lexicalAnalysisDo) Unscoped() *lexicalAnalysisDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lexicalAnalysisDo) Create(values ...*model.LexicalAnalysis) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lexicalAnalysisDo) CreateInBatches(values []*model.LexicalAnalysis, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lexicalAnalysisDo) Save(values ...*model.LexicalAnalysis) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lexicalAnalysisDo) First() (*model.LexicalAnalysis, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LexicalAnalysis), nil
	}
}

func (l lexicalAnalysisDo) Take() (*model.LexicalAnalysis, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LexicalAnalysis), nil
	}
}

func (l lexicalAnalysisDo) Last() (*model.LexicalAnalysis, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LexicalAnalysis), nil
	}
}

func (l lexicalAnalysisDo) Find() ([]*model.LexicalAnalysis, error) {
	result, err := l.DO.Find()
	return result.([]*model.LexicalAnalysis), err
}

func (l lexicalAnalysisDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LexicalAnalysis, err error) {
	buf := make([]*model.LexicalAnalysis, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lexicalAnalysisDo) FindInBatches(result *[]*model.LexicalAnalysis, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lexicalAnalysisDo) Attrs(attrs ...field.AssignExpr) *lexicalAnalysisDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lexicalAnalysisDo) Assign(attrs ...field.AssignExpr) *lexicalAnalysisDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lexicalAnalysisDo) Joins(fields ...field.RelationField) *lexicalAnalysisDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lexicalAnalysisDo) Preload(fields ...field.RelationField) *lexicalAnalysisDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lexicalAnalysisDo) FirstOrInit() (*model.LexicalAnalysis, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LexicalAnalysis), nil
	}
}

func (l lexicalAnalysisDo) FirstOrCreate() (*model.LexicalAnalysis, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LexicalAnalysis), nil
	}
}

func (l lexicalAnalysisDo) FindByPage(offset int, limit int) (result []*model.LexicalAnalysis, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lexicalAnalysisDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lexicalAnalysisDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lexicalAnalysisDo) Delete(models ...*model.LexicalAnalysis) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lexicalAnalysisDo) withDO(do gen.Dao) *lexicalAnalysisDo {
	l.DO = *do.(*gen.DO)
	return l
}
