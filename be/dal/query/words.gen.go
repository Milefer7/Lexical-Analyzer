// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"github.com/Milefer7/compliation_exp/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWords(db *gorm.DB, opts ...gen.DOOption) words {
	_words := words{}

	_words.wordsDo.UseDB(db, opts...)
	_words.wordsDo.UseModel(&model.Words{})

	tableName := _words.wordsDo.TableName()
	_words.ALL = field.NewAsterisk(tableName)
	_words.ID = field.NewInt(tableName, "id")
	_words.Name = field.NewString(tableName, "name")
	_words.Word = field.NewString(tableName, "word")

	_words.fillFieldMap()

	return _words
}

type words struct {
	wordsDo wordsDo

	ALL  field.Asterisk
	ID   field.Int
	Name field.String
	Word field.String

	fieldMap map[string]field.Expr
}

func (w words) Table(newTableName string) *words {
	w.wordsDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w words) As(alias string) *words {
	w.wordsDo.DO = *(w.wordsDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *words) updateTableName(table string) *words {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt(table, "id")
	w.Name = field.NewString(table, "name")
	w.Word = field.NewString(table, "word")

	w.fillFieldMap()

	return w
}

func (w *words) WithContext(ctx context.Context) *wordsDo { return w.wordsDo.WithContext(ctx) }

func (w words) TableName() string { return w.wordsDo.TableName() }

func (w words) Alias() string { return w.wordsDo.Alias() }

func (w words) Columns(cols ...field.Expr) gen.Columns { return w.wordsDo.Columns(cols...) }

func (w *words) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *words) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["id"] = w.ID
	w.fieldMap["name"] = w.Name
	w.fieldMap["word"] = w.Word
}

func (w words) clone(db *gorm.DB) words {
	w.wordsDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w words) replaceDB(db *gorm.DB) words {
	w.wordsDo.ReplaceDB(db)
	return w
}

type wordsDo struct{ gen.DO }

func (w wordsDo) Debug() *wordsDo {
	return w.withDO(w.DO.Debug())
}

func (w wordsDo) WithContext(ctx context.Context) *wordsDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wordsDo) ReadDB() *wordsDo {
	return w.Clauses(dbresolver.Read)
}

func (w wordsDo) WriteDB() *wordsDo {
	return w.Clauses(dbresolver.Write)
}

func (w wordsDo) Session(config *gorm.Session) *wordsDo {
	return w.withDO(w.DO.Session(config))
}

func (w wordsDo) Clauses(conds ...clause.Expression) *wordsDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wordsDo) Returning(value interface{}, columns ...string) *wordsDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wordsDo) Not(conds ...gen.Condition) *wordsDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wordsDo) Or(conds ...gen.Condition) *wordsDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wordsDo) Select(conds ...field.Expr) *wordsDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wordsDo) Where(conds ...gen.Condition) *wordsDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wordsDo) Order(conds ...field.Expr) *wordsDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wordsDo) Distinct(cols ...field.Expr) *wordsDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wordsDo) Omit(cols ...field.Expr) *wordsDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wordsDo) Join(table schema.Tabler, on ...field.Expr) *wordsDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wordsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wordsDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wordsDo) RightJoin(table schema.Tabler, on ...field.Expr) *wordsDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wordsDo) Group(cols ...field.Expr) *wordsDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wordsDo) Having(conds ...gen.Condition) *wordsDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wordsDo) Limit(limit int) *wordsDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wordsDo) Offset(offset int) *wordsDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wordsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wordsDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wordsDo) Unscoped() *wordsDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wordsDo) Create(values ...*model.Words) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wordsDo) CreateInBatches(values []*model.Words, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wordsDo) Save(values ...*model.Words) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wordsDo) First() (*model.Words, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Words), nil
	}
}

func (w wordsDo) Take() (*model.Words, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Words), nil
	}
}

func (w wordsDo) Last() (*model.Words, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Words), nil
	}
}

func (w wordsDo) Find() ([]*model.Words, error) {
	result, err := w.DO.Find()
	return result.([]*model.Words), err
}

func (w wordsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Words, err error) {
	buf := make([]*model.Words, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wordsDo) FindInBatches(result *[]*model.Words, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wordsDo) Attrs(attrs ...field.AssignExpr) *wordsDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wordsDo) Assign(attrs ...field.AssignExpr) *wordsDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wordsDo) Joins(fields ...field.RelationField) *wordsDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wordsDo) Preload(fields ...field.RelationField) *wordsDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wordsDo) FirstOrInit() (*model.Words, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Words), nil
	}
}

func (w wordsDo) FirstOrCreate() (*model.Words, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Words), nil
	}
}

func (w wordsDo) FindByPage(offset int, limit int) (result []*model.Words, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wordsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wordsDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wordsDo) Delete(models ...*model.Words) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wordsDo) withDO(do gen.Dao) *wordsDo {
	w.DO = *do.(*gen.DO)
	return w
}
