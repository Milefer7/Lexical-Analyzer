// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	Alphabet        *alphabet
	Delimiter       *delimiter
	Keywords        *keywords
	LexicalAnalysis *lexicalAnalysis
	Words           *words
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Alphabet = &Q.Alphabet
	Delimiter = &Q.Delimiter
	Keywords = &Q.Keywords
	LexicalAnalysis = &Q.LexicalAnalysis
	Words = &Q.Words
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Alphabet:        newAlphabet(db, opts...),
		Delimiter:       newDelimiter(db, opts...),
		Keywords:        newKeywords(db, opts...),
		LexicalAnalysis: newLexicalAnalysis(db, opts...),
		Words:           newWords(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Alphabet        alphabet
	Delimiter       delimiter
	Keywords        keywords
	LexicalAnalysis lexicalAnalysis
	Words           words
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Alphabet:        q.Alphabet.clone(db),
		Delimiter:       q.Delimiter.clone(db),
		Keywords:        q.Keywords.clone(db),
		LexicalAnalysis: q.LexicalAnalysis.clone(db),
		Words:           q.Words.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Alphabet:        q.Alphabet.replaceDB(db),
		Delimiter:       q.Delimiter.replaceDB(db),
		Keywords:        q.Keywords.replaceDB(db),
		LexicalAnalysis: q.LexicalAnalysis.replaceDB(db),
		Words:           q.Words.replaceDB(db),
	}
}

type queryCtx struct {
	Alphabet        *alphabetDo
	Delimiter       *delimiterDo
	Keywords        *keywordsDo
	LexicalAnalysis *lexicalAnalysisDo
	Words           *wordsDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Alphabet:        q.Alphabet.WithContext(ctx),
		Delimiter:       q.Delimiter.WithContext(ctx),
		Keywords:        q.Keywords.WithContext(ctx),
		LexicalAnalysis: q.LexicalAnalysis.WithContext(ctx),
		Words:           q.Words.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
