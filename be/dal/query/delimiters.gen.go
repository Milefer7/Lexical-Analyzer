// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Milefer7/compliation_exp/dal/model"
)

func newDelimiter(db *gorm.DB, opts ...gen.DOOption) delimiter {
	_delimiter := delimiter{}

	_delimiter.delimiterDo.UseDB(db, opts...)
	_delimiter.delimiterDo.UseModel(&model.Delimiter{})

	tableName := _delimiter.delimiterDo.TableName()
	_delimiter.ALL = field.NewAsterisk(tableName)
	_delimiter.ID = field.NewInt(tableName, "id")
	_delimiter.Name = field.NewString(tableName, "name")

	_delimiter.fillFieldMap()

	return _delimiter
}

type delimiter struct {
	delimiterDo

	ALL  field.Asterisk
	ID   field.Int
	Name field.String

	fieldMap map[string]field.Expr
}

func (d delimiter) Table(newTableName string) *delimiter {
	d.delimiterDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d delimiter) As(alias string) *delimiter {
	d.delimiterDo.DO = *(d.delimiterDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *delimiter) updateTableName(table string) *delimiter {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt(table, "id")
	d.Name = field.NewString(table, "name")

	d.fillFieldMap()

	return d
}

func (d *delimiter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *delimiter) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
}

func (d delimiter) clone(db *gorm.DB) delimiter {
	d.delimiterDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d delimiter) replaceDB(db *gorm.DB) delimiter {
	d.delimiterDo.ReplaceDB(db)
	return d
}

type delimiterDo struct{ gen.DO }

func (d delimiterDo) Debug() *delimiterDo {
	return d.withDO(d.DO.Debug())
}

func (d delimiterDo) WithContext(ctx context.Context) *delimiterDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d delimiterDo) ReadDB() *delimiterDo {
	return d.Clauses(dbresolver.Read)
}

func (d delimiterDo) WriteDB() *delimiterDo {
	return d.Clauses(dbresolver.Write)
}

func (d delimiterDo) Session(config *gorm.Session) *delimiterDo {
	return d.withDO(d.DO.Session(config))
}

func (d delimiterDo) Clauses(conds ...clause.Expression) *delimiterDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d delimiterDo) Returning(value interface{}, columns ...string) *delimiterDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d delimiterDo) Not(conds ...gen.Condition) *delimiterDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d delimiterDo) Or(conds ...gen.Condition) *delimiterDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d delimiterDo) Select(conds ...field.Expr) *delimiterDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d delimiterDo) Where(conds ...gen.Condition) *delimiterDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d delimiterDo) Order(conds ...field.Expr) *delimiterDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d delimiterDo) Distinct(cols ...field.Expr) *delimiterDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d delimiterDo) Omit(cols ...field.Expr) *delimiterDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d delimiterDo) Join(table schema.Tabler, on ...field.Expr) *delimiterDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d delimiterDo) LeftJoin(table schema.Tabler, on ...field.Expr) *delimiterDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d delimiterDo) RightJoin(table schema.Tabler, on ...field.Expr) *delimiterDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d delimiterDo) Group(cols ...field.Expr) *delimiterDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d delimiterDo) Having(conds ...gen.Condition) *delimiterDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d delimiterDo) Limit(limit int) *delimiterDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d delimiterDo) Offset(offset int) *delimiterDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d delimiterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *delimiterDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d delimiterDo) Unscoped() *delimiterDo {
	return d.withDO(d.DO.Unscoped())
}

func (d delimiterDo) Create(values ...*model.Delimiter) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d delimiterDo) CreateInBatches(values []*model.Delimiter, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d delimiterDo) Save(values ...*model.Delimiter) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d delimiterDo) First() (*model.Delimiter, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Delimiter), nil
	}
}

func (d delimiterDo) Take() (*model.Delimiter, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Delimiter), nil
	}
}

func (d delimiterDo) Last() (*model.Delimiter, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Delimiter), nil
	}
}

func (d delimiterDo) Find() ([]*model.Delimiter, error) {
	result, err := d.DO.Find()
	return result.([]*model.Delimiter), err
}

func (d delimiterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Delimiter, err error) {
	buf := make([]*model.Delimiter, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d delimiterDo) FindInBatches(result *[]*model.Delimiter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d delimiterDo) Attrs(attrs ...field.AssignExpr) *delimiterDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d delimiterDo) Assign(attrs ...field.AssignExpr) *delimiterDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d delimiterDo) Joins(fields ...field.RelationField) *delimiterDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d delimiterDo) Preload(fields ...field.RelationField) *delimiterDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d delimiterDo) FirstOrInit() (*model.Delimiter, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Delimiter), nil
	}
}

func (d delimiterDo) FirstOrCreate() (*model.Delimiter, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Delimiter), nil
	}
}

func (d delimiterDo) FindByPage(offset int, limit int) (result []*model.Delimiter, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d delimiterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d delimiterDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d delimiterDo) Delete(models ...*model.Delimiter) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *delimiterDo) withDO(do gen.Dao) *delimiterDo {
	d.DO = *do.(*gen.DO)
	return d
}
