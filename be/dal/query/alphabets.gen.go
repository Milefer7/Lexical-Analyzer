// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Milefer7/compliation_exp/dal/model"
)

func newAlphabet(db *gorm.DB, opts ...gen.DOOption) alphabet {
	_alphabet := alphabet{}

	_alphabet.alphabetDo.UseDB(db, opts...)
	_alphabet.alphabetDo.UseModel(&model.Alphabet{})

	tableName := _alphabet.alphabetDo.TableName()
	_alphabet.ALL = field.NewAsterisk(tableName)
	_alphabet.Key = field.NewInt(tableName, "key")
	_alphabet.Value = field.NewString(tableName, "value")

	_alphabet.fillFieldMap()

	return _alphabet
}

type alphabet struct {
	alphabetDo

	ALL   field.Asterisk
	Key   field.Int
	Value field.String

	fieldMap map[string]field.Expr
}

func (a alphabet) Table(newTableName string) *alphabet {
	a.alphabetDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alphabet) As(alias string) *alphabet {
	a.alphabetDo.DO = *(a.alphabetDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alphabet) updateTableName(table string) *alphabet {
	a.ALL = field.NewAsterisk(table)
	a.Key = field.NewInt(table, "key")
	a.Value = field.NewString(table, "value")

	a.fillFieldMap()

	return a
}

func (a *alphabet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alphabet) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["key"] = a.Key
	a.fieldMap["value"] = a.Value
}

func (a alphabet) clone(db *gorm.DB) alphabet {
	a.alphabetDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alphabet) replaceDB(db *gorm.DB) alphabet {
	a.alphabetDo.ReplaceDB(db)
	return a
}

type alphabetDo struct{ gen.DO }

func (a alphabetDo) Debug() *alphabetDo {
	return a.withDO(a.DO.Debug())
}

func (a alphabetDo) WithContext(ctx context.Context) *alphabetDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alphabetDo) ReadDB() *alphabetDo {
	return a.Clauses(dbresolver.Read)
}

func (a alphabetDo) WriteDB() *alphabetDo {
	return a.Clauses(dbresolver.Write)
}

func (a alphabetDo) Session(config *gorm.Session) *alphabetDo {
	return a.withDO(a.DO.Session(config))
}

func (a alphabetDo) Clauses(conds ...clause.Expression) *alphabetDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alphabetDo) Returning(value interface{}, columns ...string) *alphabetDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alphabetDo) Not(conds ...gen.Condition) *alphabetDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alphabetDo) Or(conds ...gen.Condition) *alphabetDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alphabetDo) Select(conds ...field.Expr) *alphabetDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alphabetDo) Where(conds ...gen.Condition) *alphabetDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alphabetDo) Order(conds ...field.Expr) *alphabetDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alphabetDo) Distinct(cols ...field.Expr) *alphabetDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alphabetDo) Omit(cols ...field.Expr) *alphabetDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alphabetDo) Join(table schema.Tabler, on ...field.Expr) *alphabetDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alphabetDo) LeftJoin(table schema.Tabler, on ...field.Expr) *alphabetDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alphabetDo) RightJoin(table schema.Tabler, on ...field.Expr) *alphabetDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alphabetDo) Group(cols ...field.Expr) *alphabetDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alphabetDo) Having(conds ...gen.Condition) *alphabetDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alphabetDo) Limit(limit int) *alphabetDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alphabetDo) Offset(offset int) *alphabetDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alphabetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *alphabetDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alphabetDo) Unscoped() *alphabetDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alphabetDo) Create(values ...*model.Alphabet) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alphabetDo) CreateInBatches(values []*model.Alphabet, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alphabetDo) Save(values ...*model.Alphabet) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alphabetDo) First() (*model.Alphabet, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alphabet), nil
	}
}

func (a alphabetDo) Take() (*model.Alphabet, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alphabet), nil
	}
}

func (a alphabetDo) Last() (*model.Alphabet, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alphabet), nil
	}
}

func (a alphabetDo) Find() ([]*model.Alphabet, error) {
	result, err := a.DO.Find()
	return result.([]*model.Alphabet), err
}

func (a alphabetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Alphabet, err error) {
	buf := make([]*model.Alphabet, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alphabetDo) FindInBatches(result *[]*model.Alphabet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alphabetDo) Attrs(attrs ...field.AssignExpr) *alphabetDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alphabetDo) Assign(attrs ...field.AssignExpr) *alphabetDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alphabetDo) Joins(fields ...field.RelationField) *alphabetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alphabetDo) Preload(fields ...field.RelationField) *alphabetDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alphabetDo) FirstOrInit() (*model.Alphabet, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alphabet), nil
	}
}

func (a alphabetDo) FirstOrCreate() (*model.Alphabet, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alphabet), nil
	}
}

func (a alphabetDo) FindByPage(offset int, limit int) (result []*model.Alphabet, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alphabetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alphabetDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alphabetDo) Delete(models ...*model.Alphabet) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alphabetDo) withDO(do gen.Dao) *alphabetDo {
	a.DO = *do.(*gen.DO)
	return a
}
